stages:
  - test
  # - install
  - build
  - deploy

test-app:
  image: mhart/alpine-node:12
  stage: test
  variables:
    NODE_ENV: test
    MONGODB_URI: $DATABASE
    JWT_KEY: 123456
    APP_PORT: 3000
    APP_HOST: localhost
    APP_URL: /api/v1
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success
  script:
    - apk update
    - yarn
    - yarn test
  allow_failure: false

build-app:
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  stage: build
  before_script:
    - apk update && apk add bash curl gettext && apk --no-cache add docker-compose
    - export CONTAINER_REGISTRY=us.gcr.io/$GCLOUD_PROJECT_ID/backmean
    - echo $GCLOUD_SERVICE_KEY | base64 -d  > ${HOME}/service-account.json
    - echo $ENV_PROD | base64 -d  > ./.env.prod
    - docker login -u _json_key --password-stdin https://us.gcr.io < ${HOME}/service-account.json
  script:
    - bash ./scripts/build-container-prod.sh
  only:
    - develop

deploy-app:
  image: google/cloud-sdk
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success
  before_script:
    - apt-get install -y gettext
    - export CONTAINER_REGISTRY=us.gcr.io/$GCLOUD_PROJECT_ID/backmean
    - echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/service-account.json
    - gcloud auth activate-service-account --key-file ${HOME}/service-account.json  || die "unable to authenticate service account for gcloud"
    - gcloud container clusters get-credentials $GCLOUD_CLUSTER
    - envsubst < ./system/template-k8s.yml > ./k8s.yml
    - docker login -u _json_key --password-stdin https://us.gcr.io < ${HOME}/service-account.json
  script:
    - kubectl apply -f ./k8s.yml
    - kubectl set image deployments/${FERRETERIA_UID}-deployment ${FERRETERIA_UID}-app=$CONTAINER_REGISTRY:$CI_COMMIT_SHA
  variables:
    FERRETERIA_UID: '$CI_COMMIT_REF_NAME'
